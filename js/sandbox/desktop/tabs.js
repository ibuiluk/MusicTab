$(function() {var context;var staveHelper;var paginator;var tab;var scale = 1;var currentTrackIndex = 0;var views;$(document).ready(function(){	initEnvironment();});function initEnvironment(){	var height = $(document).height() - 40;	var width = $(document).width() - 40;	context = new MusicTab.Stave.Context({						height: height,						width: width,						scale: scale,						placeHolderId: "body",						tabDivClass:"vex-tabdiv"					});	staveHelper = new MusicTab.Stave.Helper(context);	paginator = new MusicTab.Stave.Paginator({		context: context,		staveHelper: staveHelper	});}function readBlob() {	var fileControl = document.getElementById('files');	if (fileControl.files && !fileControl.files.length) {	  alert('Please select a file!');	  return;	}	var name = !fileControl.files? fileControl.value: fileControl.files[0];		(new MusicTab.Utils.FileReader()).read(name, function(data){		MusicTab.Tablatures.TabFactory.create({			data:data, 			helper:staveHelper		}, 		function (tablature) {			currentTrackIndex = 0;			tab = tablature;			processTab();		});	})}  $("#files").change(function(){	clearTab();	readBlob();});$("#tracks").change(function(){	currentTrackIndex = parseInt(this.value);	clearTab();	showTab();});$("#scale").change(function(){	scale = parseFloat(this.value);	clearTab();	showTab();});function clearTab(){	$('#body div').html('');}function processTab() {	// create tracks	var tracks = [];	$('#tracks').html('');	for (var i = 0; i < tab.tracks.length; i++) {		tracks.push(new MusicTab.Tablatures.Track({			name: tab.tracks[i].name,			instrument: tab.tracks[i].instrument,			selected: tab.tracks[i].selected,			index: i		}));				$('#tracks')			 .append($("<option></option>")			 .attr("value", i)			 .text(tab.tracks[i].name)); 	}		//show tab	showTab();}function showTab(){	initEnvironment();	var actualWidth = staveHelper.getActualWidth();	var linePerPage = staveHelper.getLinePerPage();		var measures = tab.tracks[currentTrackIndex].measures;	var chunks = paginator.split(measures, actualWidth);	var pages = paginator.doPaging(chunks, linePerPage);	//insertTitle(tab, trackIndex);	views = paginator.insertPages(pages, tab.tracks[currentTrackIndex]);}});